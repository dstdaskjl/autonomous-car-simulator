#:set file_arrow_forward 'arrow-forward.png'
#:set file_arrow_backward 'arrow-backward.png'
#:set file_arrow_left 'arrow-left.png'
#:set file_arrow_right 'arrow-right.png'
#:set file_font_bold 'Montserrat/Montserrat-Bold.ttf'
#:set file_font_medium 'Montserrat/Montserrat-Medium.ttf'
#:set file_font_semi_bold 'Montserrat/Montserrat-SemiBold.ttf'

#:set rgba_black (0, 0, 0, 1)
#:set rgba_blue (28/255, 154/255, 214/255, 1)
#:set rgba_dark_grey (154/255, 155/255, 156/255, 1)
#:set rgba_dim_grey (88/255, 89/255, 91/255, 1)
#:set rgba_green (42/255, 182/255, 115/255, 1)
#:set rgba_grey (188/255, 190/255, 192/255, 1)
#:set rgba_light_grey (230/255, 231/255, 232/255, 1)
#:set rgba_orange (247/255, 149/255, 32/255, 1)
#:set rgba_red (1, 0, 0, 1)
#:set rgba_transparent (0, 0, 0, 0)
#:set rgba_transparent_grey (251/255, 251/255, 251/255, 1)
#:set rgba_white (1, 1, 1, 1)

<Background@FloatLayout>:
    size_hint: 1, 1
    pos_hint: {'x': 0, 'y': 0}
    canvas.before:
        Color:
            rgba: rgba_white
        Rectangle:
            size: self.size
            pos: self.pos

<Arena@Widget>:
    size_hint: 0.8, 0.8
    pos_hint: {'x': 0.1, 'y': 0.1}
    canvas.after:
        Color:
            rgba: rgba_black
        Line:
            width: 2
            rectangle: self.x, self.y, self.width, self.height

<Maze@GridLayout>:
    rows: 21
    cols: 30
    spacing: 1
    size_hint: 0.8, 0.8
    pos_hint: {'x': 0.1, 'y': 0.1}

    canvas.before:
        Color:
            rgba: rgba_black
        Rectangle:
            size: self.size
            pos: self.pos

<Car>:
    angle: 0
    size_hint: 0.1, 0.04
    arrow: 'forward'

    canvas.after:
        PushMatrix
        Rotate:
            angle: root.angle
            axis: 0, 0, 1
            origin: root.center


        # Wheels
        Color:
            rgba: rgba_green
        Rectangle:
            pos: self.x + (self.width / 4) + 10, self.y - 2
            size: self.width / 7, 4

        Color:
            rgba: rgba_green
        Rectangle:
            pos: self.x + (self.width / 2) + 10, self.y - 2
            size: self.width / 7, 4

        Color:
            rgba: rgba_green
        Rectangle:
            pos: self.x + (self.width / 4) + 10, self.top - 2
            size: self.width / 7, 4

        Color:
            rgba: rgba_green
        Rectangle:
            pos: self.x + (self.width / 2) + 10, self.top - 2
            size: self.width / 7, 4


        # Car body
        Color:
            rgba: rgba_black
        Rectangle:
            pos: self.x + (self.width / 4), self.y + 2
            size: self.width / 2, self.height - 4


        # Arrows
        Color:
            rgba: rgba_black if self.arrow == 'forward' else rgba_transparent
        Rectangle:
            pos: self.x - 5, self.y + self.height / 4
            size: self.width / 6, self.height / 2
            source: file_arrow_forward

        Color:
            rgba: rgba_black if self.arrow == 'backward' else rgba_transparent
        Rectangle:
            pos: self.x + (self.width * 3 / 4) +  5, self.y + self.height / 4
            size: self.width / 6, self.height / 2
            source: file_arrow_backward

        Color:
            rgba: rgba_black if self.arrow == 'left' else rgba_transparent
        Rectangle:
            pos: self.x - 5, self.y
            size: self.width / 6, self.height / 2
            source: file_arrow_left

        Color:
            rgba: rgba_black if self.arrow == 'right' else rgba_transparent
        Rectangle:
            pos: self.x - 5, self.y + self.height / 2
            size: self.width / 6, self.height / 2
            source: file_arrow_right

<Head>:
    angle: 0
    size_hint: 0.006, 0.016
    canvas:
        PushMatrix
        Rotate:
            angle: root.angle
            axis: 0, 0, 1
            origin: root.x + root.width, root.y + (self.height / 2)

        Color:
            rgba: rgba_white
        Rectangle:
            size: self.width / 3, self.height
            pos: self.pos

        Color:
            rgba: rgba_white
        Rectangle:
            size: self.width, self.height / 6
            pos: self.x, self.y + (self.height / 2) - (self.height / 12)

<LWing>:
    size_hint: 0.01, 0.05
    canvas.after:
        Color:
            rgba: rgba_transparent
        Rectangle:
            size: self.size
            pos: self.pos

<RWing>:
    size_hint: 0.01, 0.05
    canvas.after:
        Color:
            rgba: rgba_transparent
        Rectangle:
            size: self.size
            pos: self.pos

<Obstacle>:
    canvas:
        Color:
            rgba: self.color
        Rectangle:
            size: self.size
            pos: self.pos

<Simulator>:
    arena: arena
    maze: maze
    car: car
    head: head
    lwing: lwing
    rwing: rwing

    Background:
        id: background

    Arena:
        id: arena

    Maze:
        id: maze

    Label:
        text: '(' + str(round(car.center_x - arena.x)) + ',' + str(round(car.center_y - arena.y)) + ')'
        font_size: 20
        color: rgba_black
        size_hint: None, None
        size: car.size
        center_x: car.center_x
        y: car.top + 70

    Car:
        id: car
        center: root.center

    LWing:
        id: lwing
        x: car.x + (car.width / 4)
        top: car.y

    RWing:
        id: rwing
        x: car.x + (car.width / 4)
        y: car.top

    Head:
        id: head
        x: car.x + (car.width / 4) + 10
        center_y: car.center_y